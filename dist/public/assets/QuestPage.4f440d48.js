var e=Object.defineProperty,t=Object.defineProperties,s=Object.getOwnPropertyDescriptors,a=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,u=(t,s,a)=>s in t?e(t,s,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[s]=a;import{d as o,m as r,h as n,o as l,b as m,f as c,j as p,w as q,t as b,s as f,e as Q}from"./vendor.b9ef672a.js";import{_ as h}from"./SubmitQuestModal.2ebde300.js";import{_ as y}from"./QuestInfo.70cf9455.js";import{_ as I}from"./DataTable.01cd035d.js";import{_ as M}from"./index.59af7da6.js";import"./ModalDialog.4a9168b4.js";import"./FormTextarea.5ea73115.js";import"./AssociatedBeatmaps.67442439.js";var x,j,P={state:{quests:[],exampleQuest:null},mutations:{setQuests(e,t){e.quests=t},setExampleQuest(e,t){e.exampleQuest=t},updateQuest(e,t){const s=e.quests.findIndex((e=>e.id===t.id));-1!==s&&(e.quests[s]=t)},addQuest(e,t){e.quests.push(t)},deleteQuest(e,t){const s=e.quests.findIndex((e=>e.id===t.id));e.quests.splice(s,1)},renameQuest(e,t){const s=e.quests.find((e=>e.id==t.questId));s&&(s.name=t.name)},updatePrice(e,t){const s=e.quests.find((e=>e.id==t.questId));s&&(s.price=t.price)},updateRequiredMapsets(e,t){const s=e.quests.find((e=>e.id==t.questId));s&&(s.requiredMapsets=t.requiredMapsets)},updateDescription(e,t){const s=e.quests.find((e=>e.id==t.questId));s&&(s.descriptionMain=t.description)},resetQuestDeadline(e,t){const s=e.quests.find((e=>e.id==t.questId));s&&(s.deadline=t.deadline)},updateExpiration(e,t){const s=e.quests.find((e=>e.id==t.questId));s&&(s.expiration=t.expiration)},updateMinParty(e,t){const s=e.quests.find((e=>e.id==t.questId));s&&(s.minParty=t.minParty)},updateMaxParty(e,t){const s=e.quests.find((e=>e.id==t.questId));s&&(s.maxParty=t.maxParty)}}},v=o({components:{DataTable:I,SubmitQuestModal:h,QuestInfo:y,ModesIcons:M},data:()=>({selectedQuestId:""}),computed:(x=((e,t)=>{for(var s in t||(t={}))d.call(t,s)&&u(e,s,t[s]);if(a)for(var s of a(t))i.call(t,s)&&u(e,s,t[s]);return e})({},r({quests:e=>e.questsAdmin.quests})),j={selectedQuest(){return this.quests.find((e=>e.id===this.selectedQuestId))}},t(x,s(j))),beforeCreate(){this.$store.hasModule("questsAdmin")||this.$store.registerModule("questsAdmin",P)},unmounted(){this.$store.hasModule("questsAdmin")&&this.$store.unregisterModule("questsAdmin")},async created(){const e=await this.$http.initialRequest("/admin/quests/load");this.$http.isError(e)||this.$store.commit("setQuests",e)},methods:{deleteQuest(e){const t=this.quests.findIndex((t=>t.id==e.id));this.quests.splice(t,1)},updateQuest(e){const t=this.quests.findIndex((t=>t.id==e.id));-1!==t&&(this.quests[t]=e)},async removeDuplicatePartyMembers(e){await this.$http.executePost("/admin/quests/removeDuplicatePartyMembers",{},e)&&this.$store.dispatch("updateToastMessages",{message:"removed duplicate party members",type:"success"})}}});const g={class:"container card card-body py-1"},w={class:"row"},D={class:"col"},O=c("button",{class:"btn btn-sm btn-info w-100 mb-1","data-bs-toggle":"modal","data-bs-target":"#submitQuest"}," Add quest ",-1);v.render=function(e,t,s,a,d,i){const u=n("modes-icons"),o=n("data-table"),r=n("submit-quest-modal"),h=n("quest-info");return l(),m("div",null,[c("div",g,[c("div",w,[c("div",D,[O,c("button",{class:"btn btn-sm btn-info w-100 mb-1",onClick:t[0]||(t[0]=t=>e.removeDuplicatePartyMembers(t))}," Remove duplicate party members "),p(o,{data:e.quests,headers:["name","creator","modes","status","mapsets"],"custom-data-target":"#editQuest","onUpdate:selectedId":t[1]||(t[1]=t=>e.selectedQuestId=t)},{default:q((({obj:e})=>[c("td",null,b(e.name),1),c("td",null,b(e.creator.username),1),c("td",null,[p(u,{modes:e.modes},null,8,["modes"])]),c("td",null,b(e.status),1),c("td",null,b(e.requiredMapsets),1)])),_:1},8,["data"])])])]),p(r,{"is-admin":!0}),e.selectedQuest?(l(),f(h,{key:0,quest:e.selectedQuest,onUpdateQuest:t[2]||(t[2]=t=>e.updateQuest(t)),onDeleteQuest:t[3]||(t[3]=t=>e.deleteQuest(t))},null,8,["quest"])):Q("",!0)])};export{v as default};
