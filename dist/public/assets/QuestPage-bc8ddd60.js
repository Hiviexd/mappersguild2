import{d as q,M as f,m as b,_ as Q,o as r,e as h,a as n,k as a,w as M,t as u,c as I,q as _,i as o}from"./index-fc4c7aa0.js";import{S as $}from"./SubmitQuestModal-6408ec6e.js";import{Q as P}from"./QuestInfo-2cf8d575.js";import{D as g}from"./DataTable-a0b9add4.js";import"./ModalDialog-0651c23b.js";import"./AssociatedBeatmaps-d4b410d7.js";import"./beatmap-c2b9f550.js";const v={state:{quests:[]},mutations:{setQuests(e,t){e.quests=t},updateQuest(e,t){const s=e.quests.findIndex(i=>i.id===t.id);s!==-1&&(e.quests[s]=t)},addQuest(e,t){e.quests.push(t)},deleteQuest(e,t){const s=e.quests.findIndex(i=>i.id===t.id);e.quests.splice(s,1)},renameQuest(e,t){const s=e.quests.find(i=>i.id==t.questId);s&&(s.name=t.name)},updatePrice(e,t){const s=e.quests.find(i=>i.id==t.questId);s&&(s.price=t.price)},updateRequiredMapsets(e,t){const s=e.quests.find(i=>i.id==t.questId);s&&(s.requiredMapsets=t.requiredMapsets)},updateDescription(e,t){const s=e.quests.find(i=>i.id==t.questId);s&&(s.descriptionMain=t.description)},resetQuestDeadline(e,t){const s=e.quests.find(i=>i.id==t.questId);s&&(s.deadline=t.deadline)},updateExpiration(e,t){const s=e.quests.find(i=>i.id==t.questId);s&&(s.expiration=t.expiration)},updateMinParty(e,t){const s=e.quests.find(i=>i.id==t.questId);s&&(s.minParty=t.minParty)},updateMaxParty(e,t){const s=e.quests.find(i=>i.id==t.questId);s&&(s.maxParty=t.maxParty)}}},y=v,D=q({components:{DataTable:g,SubmitQuestModal:$,QuestInfo:P,ModesIcons:f},data(){return{selectedQuestId:""}},computed:{...b({quests:e=>e.questsAdmin.quests}),selectedQuest(){return this.quests.find(e=>e.id===this.selectedQuestId)}},beforeCreate(){this.$store.hasModule("questsAdmin")||this.$store.registerModule("questsAdmin",y)},unmounted(){this.$store.hasModule("questsAdmin")&&this.$store.unregisterModule("questsAdmin")},async created(){const e=await this.$http.initialRequest("/admin/quests/load");this.$http.isError(e)||this.$store.commit("setQuests",e)},methods:{deleteQuest(e){const t=this.quests.findIndex(s=>s.id==e.id);this.quests.splice(t,1)},updateQuest(e){const t=this.quests.findIndex(s=>s.id==e.id);t!==-1&&(this.quests[t]=e)},async removeDuplicatePartyMembers(e){await this.$http.executePost("/admin/quests/removeDuplicatePartyMembers",{},e)&&this.$store.dispatch("updateToastMessages",{message:"removed duplicate party members",type:"success"})}}}),x={class:"container card card-body py-1"},w={class:"row"},A={class:"col"},k=n("button",{class:"btn btn-sm btn-info w-100 mb-1","data-bs-toggle":"modal","data-bs-target":"#submitQuest"}," Add quest ",-1);function C(e,t,s,i,B,S){const m=o("modes-icons"),c=o("data-table"),l=o("submit-quest-modal"),p=o("quest-info");return r(),h("div",null,[n("div",x,[n("div",w,[n("div",A,[k,n("button",{class:"btn btn-sm btn-info w-100 mb-1",onClick:t[0]||(t[0]=d=>e.removeDuplicatePartyMembers(d))}," Remove duplicate party members "),a(c,{data:e.quests,headers:["name","creator","modes","status","mapsets"],"custom-data-target":"#editQuest","onUpdate:selectedId":t[1]||(t[1]=d=>e.selectedQuestId=d)},{default:M(({obj:d})=>[n("td",null,u(d.name),1),n("td",null,u(d.creator.username),1),n("td",null,[a(m,{modes:d.modes},null,8,["modes"])]),n("td",null,u(d.status),1),n("td",null,u(d.requiredMapsets),1)]),_:1},8,["data"])])])]),a(l,{"is-admin":!0}),e.selectedQuest?(r(),I(p,{key:0,quest:e.selectedQuest,onUpdateQuest:t[2]||(t[2]=d=>e.updateQuest(d)),onDeleteQuest:t[3]||(t[3]=d=>e.deleteQuest(d))},null,8,["quest"])):_("",!0)])}const z=Q(D,[["render",C]]);export{z as default};
