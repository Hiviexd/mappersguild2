import{_ as t}from"./ModalDialog.472e77e7.js";import{_ as e}from"./AssociatedBeatmaps.42345698.js";import{_ as s}from"./index.7bc801c7.js";import{d as i,i as a,o,u,w as n,l as r,t as p,e as d,f as c,q as m,O as l,b as h,F as q,j as y}from"./vendor.df51a6ea.js";var f=i({name:"QuestInfo",components:{AssociatedBeatmaps:e,ModalDialog:t,ModesIcons:s},props:{quest:{type:Object,required:!0}},data(){return{renameQuestName:this.quest.name,price:this.quest.price,requiredMapsets:this.quest.requiredMapsets,minParty:this.quest.minParty,maxParty:this.quest.maxParty,description:this.quest.descriptionMain,duplicateQuestName:this.quest.name,expiration:this.quest.expiration?this.quest.expiration.toString():""}},watch:{quest(){this.renameQuestName=this.quest.name,this.price=this.quest.price,this.requiredMapsets=this.quest.requiredMapsets,this.minParty=this.quest.minParty,this.maxParty=this.quest.maxParty,this.description=this.quest.descriptionMain,this.duplicateQuestName=this.quest.name,this.expiration=this.quest.expiration?this.quest.expiration.toString():""}},methods:{async renameQuest(t){const e=await this.$http.executePost(`/admin/quests/${this.quest.id}/rename`,{name:this.renameQuestName},t);this.$http.isError(e)||(this.$store.dispatch("updateToastMessages",{message:"renamed quest",type:"info"}),this.$store.commit("renameQuest",{questId:this.quest.id,name:e}))},async updatePrice(t){const e=await this.$http.executePost(`/admin/quests/${this.quest.id}/updatePrice`,{price:this.price},t);this.$http.isError(e)||(this.$store.dispatch("updateToastMessages",{message:"updated price",type:"info"}),this.$store.commit("updatePrice",{questId:this.quest.id,price:e}))},async updateRequiredMapsets(t){const e=await this.$http.executePost(`/admin/quests/${this.quest.id}/updateRequiredMapsets`,{requiredMapsets:this.requiredMapsets},t);this.$http.isError(e)||(this.$store.dispatch("updateToastMessages",{message:"updated required mapsets",type:"info"}),this.$store.commit("updateRequiredMapsets",{questId:this.quest.id,requiredMapsets:e}))},async updateDescription(t){const e=await this.$http.executePost(`/admin/quests/${this.quest.id}/updateDescription/`,{description:this.description},t);this.$http.isError(e)||(this.$store.dispatch("updateToastMessages",{message:"updated quest description",type:"info"}),this.$store.commit("updateDescription",{questId:this.quest.id,description:e}))},async dropQuest(t){const e=await this.$http.executePost(`/admin/quests/${this.quest.id}/drop`,{},t);this.$http.isError(e)||(this.$store.dispatch("updateToastMessages",{message:"quest force dropped",type:"info"}),this.$store.commit("updateStatus",{questId:this.quest.id,status:e}))},async scheduleQuestForCompletion(t){const e=await this.$http.executePost(`/admin/quests/${this.quest.id}/scheduleForCompletion`,{queuedForCompletion:!this.quest.queuedForCompletion},t);this.$http.isError(e)||(this.$store.dispatch("updateToastMessages",{message:`quest queued for completion toggled: ${e}`,type:"info"}),this.$store.commit("updateQueuedForCompletion",{questId:this.quest.id,queuedForCompletion:e}))},async duplicateQuest(t){const e=await this.$http.executePost(`/admin/quests/${this.quest.id}/duplicate`,{name:this.duplicateQuestName},t);this.$http.isError(e)||(this.$store.dispatch("updateToastMessages",{message:"quest duplicated",type:"info"}),this.$store.commit("addQuest",{quest:e}))},async resetQuestDeadline(t){const e=await this.$http.executePost(`/admin/quests/${this.quest.id}/reset`,{},t);this.$http.isError(e)||(this.$store.dispatch("updateToastMessages",{message:`reset quest deadline to ${e}`,type:"info"}),this.$store.commit("resetQuestDeadline",{questId:this.quest.id,deadline:e}))},async deleteQuest(t){if(confirm("Are you sure?")){const e=await this.$http.executePost(`/admin/quests/${this.quest.id}/delete`,{},t);this.$http.isError(e)||(this.$bs.hideModal("editQuest"),this.$store.dispatch("updateToastMessages",{message:"quest deleted",type:"info"}),this.$store.commit("deleteQuest",{questId:this.quest.id}))}},async toggleQuestMode(t){const e=await this.$http.executePost(`/admin/quests/${this.quest.id}/toggleMode`,{mode:t});this.$http.isError(e)||(this.$store.dispatch("updateToastMessages",{message:"changed quest modes",type:"info"}),this.$store.commit("quests/updateQuest",e))},async updateExpiration(t){const e=await this.$http.executePost(`/admin/quests/${this.quest.id}/updateExpiration/`,{expiration:this.expiration},t);this.$http.isError(e)||(this.$store.dispatch("updateToastMessages",{message:"updated quest expiration",type:"info"}),this.$store.commit("updateExpiration",{questId:this.quest.id,expiration:e}))},async updateMinParty(t){const e=await this.$http.executePost(`/admin/quests/${this.quest.id}/updateMinParty/`,{minParty:this.minParty},t);this.$http.isError(e)||(this.$store.dispatch("updateToastMessages",{message:"updated minParty",type:"info"}),this.$store.commit("updateMinParty",{questId:this.quest.id,minParty:e}))},async updateMaxParty(t){const e=await this.$http.executePost(`/admin/quests/${this.quest.id}/updateMaxParty/`,{maxParty:this.maxParty},t);this.$http.isError(e)||(this.$store.dispatch("updateToastMessages",{message:"updated maxParty",type:"info"}),this.$store.commit("updateMaxParty",{questId:this.quest.id,maxParty:e}))}}});const x={class:"container"},$={class:"row"},b={class:"row"},g={class:"row"},P={class:"row"},w={class:"row"},M={class:"row"},Q={class:"row"},C={class:"col-sm-6"},k=r("Scheduled for completion: "),E={class:"text-danger"},T={class:"row"},I={class:"row"},U=["placeholder"];f.render=function(t,e,s,i,f,D){const N=a("user-link"),F=a("modes-icons"),V=a("associated-beatmaps"),j=a("modal-dialog");return o(),u(j,{id:"editQuest"},{header:n((()=>[r(p(t.quest.name)+" by ",1),t.quest.creator?(o(),u(N,{key:0,class:"text-dark",user:t.quest.creator},null,8,["user"])):d("",!0)])),default:n((()=>[c("div",x,[c("p",$,[m(c("input",{"onUpdate:modelValue":e[0]||(e[0]=e=>t.renameQuestName=e),class:"form-control form-control-sm mx-2 w-50",type:"text",autocomplete:"off",placeholder:"quest name..."},null,512),[[l,t.renameQuestName]]),c("button",{class:"btn btn-sm btn-outline-info w-25",onClick:e[1]||(e[1]=e=>t.renameQuest(e))}," Rename quest ")]),c("p",b,[m(c("input",{"onUpdate:modelValue":e[2]||(e[2]=e=>t.price=e),class:"form-control form-control-sm mx-2 w-50",type:"text",autocomplete:"off",placeholder:"price..."},null,512),[[l,t.price]]),c("button",{class:"btn btn-sm btn-outline-info w-25",onClick:e[3]||(e[3]=e=>t.updatePrice(e))}," Update price ")]),c("p",g,[m(c("input",{"onUpdate:modelValue":e[4]||(e[4]=e=>t.requiredMapsets=e),class:"form-control form-control-sm mx-2 w-50",type:"text",autocomplete:"off",placeholder:"required mapsets..."},null,512),[[l,t.requiredMapsets]]),c("button",{class:"btn btn-sm btn-outline-info w-25",onClick:e[5]||(e[5]=e=>t.updateRequiredMapsets(e))}," Update required mapsets ")]),c("p",P,[m(c("input",{"onUpdate:modelValue":e[6]||(e[6]=e=>t.minParty=e),class:"form-control form-control-sm mx-2 w-50",type:"text",autocomplete:"off",placeholder:"minParty..."},null,512),[[l,t.minParty]]),c("button",{class:"btn btn-sm btn-outline-info w-25",onClick:e[7]||(e[7]=e=>t.updateMinParty(e))}," Update minParty ")]),c("p",w,[m(c("input",{"onUpdate:modelValue":e[8]||(e[8]=e=>t.maxParty=e),class:"form-control form-control-sm mx-2 w-50",type:"text",autocomplete:"off",placeholder:"maxParty..."},null,512),[[l,t.maxParty]]),c("button",{class:"btn btn-sm btn-outline-info w-25",onClick:e[9]||(e[9]=e=>t.updateMaxParty(e))}," Update maxParty ")]),c("p",M,[m(c("textarea",{"onUpdate:modelValue":e[10]||(e[10]=e=>t.description=e),class:"form-control form-control-sm mx-2 mt-2 w-50",type:"text",autocomplete:"off",placeholder:"quest description..."},null,512),[[l,t.description]]),c("button",{class:"btn btn-sm btn-outline-info w-25",onClick:e[11]||(e[11]=e=>t.updateDescription(e))}," Update description ")]),"wip"==t.quest.status?(o(),h(q,{key:0},[c("p",null,[c("button",{class:"btn btn-sm btn-outline-danger w-100",onClick:e[12]||(e[12]=e=>t.dropQuest(e))}," Drop quest ")]),c("p",null,[c("button",{class:"btn btn-sm btn-outline-info w-100",onClick:e[13]||(e[13]=e=>t.resetQuestDeadline(e))}," Reset quest deadline ")]),c("p",Q,[c("span",C,[k,c("span",E,p(t.quest.queuedForCompletion?"true":"false"),1)]),c("button",{class:"btn btn-sm btn-outline-success col-sm-6 ms-3 w-25",onClick:e[14]||(e[14]=e=>t.scheduleQuestForCompletion(e))}," Toggle ")])],64)):d("",!0),c("p",T,[m(c("input",{"onUpdate:modelValue":e[15]||(e[15]=e=>t.duplicateQuestName=e),class:"form-control form-control-sm mx-2 w-50",type:"text",autocomplete:"off",placeholder:"new quest name..."},null,512),[[l,t.duplicateQuestName]]),c("button",{class:"btn btn-sm btn-outline-info w-25",onClick:e[16]||(e[16]=e=>t.duplicateQuest(e))}," Duplicate quest ")]),c("p",I,[m(c("input",{"onUpdate:modelValue":e[17]||(e[17]=e=>t.expiration=e),class:"form-control form-control-sm mx-2 w-50",type:"text",autocomplete:"off",placeholder:t.quest.expiration},null,8,U),[[l,t.expiration]]),c("button",{class:"btn btn-sm btn-outline-info w-25",onClick:e[18]||(e[18]=e=>t.updateExpiration(e))}," Set expiration date ")]),c("p",null,[y(F,{modes:t.quest.modes,toggler:!0,onToggle:e[19]||(e[19]=e=>t.toggleQuestMode(e))},null,8,["modes"])]),"done"==t.quest.status||"wip"==t.quest.status?(o(),u(V,{key:1,class:"mb-4","associated-maps":t.quest.associatedMaps},null,8,["associated-maps"])):d("",!0),c("p",null,[c("button",{class:"btn btn-sm btn-outline-danger w-100",onClick:e[20]||(e[20]=e=>t.deleteQuest(e))}," Delete quest ")])])])),_:1})};export{f as _};
